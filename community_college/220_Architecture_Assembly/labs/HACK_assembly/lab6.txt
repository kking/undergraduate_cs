Lab #6 - Machine Language Basics

Recall the two Hack Assembly instructions, A and C:

The A-instruction
Syntax: @value
- value is either a non-negative decimal constant, or 
- a symbol referring to such a constant.
Semantics:
- Sets the A register to value
- Side effect: RAM[A] becomes the selected RAM register

The C-instruction
Syntax: dest = comp
- comp = 0, 1, -1, D, A, !D, !A, -D, -A, D+1, A+1, D-1, A-1,
	 D+A, D-A, A-D, D&A, D|A, M, !M, -M, M+1, M-1, D+M, 
	 D-M, M-D, D&M, D|M
- dest = null, M, D, MD, A, AM, AD, AMD (M refers to RAM[A])
Semantics:
- Compute the value of comp
- Stores the result in dest

=============================================
=============================================
PART I: Translate the following tasks into  =
Hack Assembly Language:			    =
=============================================
1. Set D to A - 1
=============================================
D = A - 1	// D = A - 1


=============================================
2. Set both A and D to A + 1
=============================================
AD = A + 1	// A = A + 1, D = A + 1


=============================================
3. Set D to 19
=============================================
@19	// A = 19
D = A	// D = 19


=============================================
4. Set both A and D to A + D
=============================================
AD = A + D	// A = A + D, D = A + D


=============================================
5. Set RAM[5034] to D - 1
=============================================
@5034		// A = 5034
M = D - 1	// RAM[5034] = D - 1


=============================================
6. Set RAM[543] to 171
=============================================
@171		// A = 171
D = A		// D = 171
@543		// A = 543
M = D		// RAM[543] = 171


=============================================
7. Add 1 to RAM[7], and store result in D
=============================================
@7		// A = 7
DM = M + 1	// RAM[7] = RAM[7] + 1, D = RAM[7] + 1


=============================================
8. Add 3 to RAM[12], and store result in D
=============================================
@3		// A = 3
D = A		// D = 3
@12		// A = 12
MD = M + D	// RAM[12] = RAM[12] + 3, D = RAM[12] + 3

=============================================
9. Set RAM[0] to 3
   Set RAM[1] to 5
   Set RAM[2] to 1
   Set RAM[3] to -1
=============================================
@3	// A = 3
D = A	// D = 3
@0	// A = 0
M = D	// RAM[0] = 3

@5	// A = 5
D = A	// D = 5
@1	// A = 1
M = D	// RAM[1] = 5

@2	// A = 2
M = 1	// RAM[2] = 1

@3	// A = 3
M = -1	// RAM[3] = -1

=============================================
10. Set RAM[0] to 2
    Set RAM[1] to 3
    Set RAM[2] = RAM[0] + RAM[1]
=============================================
@2		// A = 2
D = A		// D = 2
@0		// A = 0
M = D		// RAM[0] = 2

@3		// A = 3
D = A		// D = 3
@1		// A = 1
M = D		// RAM[1] = 3

@0		// A = 0
D = M		// D = RAM[0]
@1		// A = 1
D = D + M	// D = RAM[0] + RAM[1]
@2		// A = 2
M = D		// RAM[2] = RAM[0] + RAM[1] 	?????


=============================================
=============================================
PART II: Translate the following into Hack  =
Assembly Language (use variable values from =
slides):				    =
=============================================
1. sum = 0
=============================================
@sum	// 4500; A = 4500
M = 0	// RAM[4500] = 0


=============================================
2. j = j + 1
=============================================
@j		// A = 3012
M = M + 1	// RAM[3012] = RAM[3012] + 1


=============================================
3. q = sum + 12 - j
=============================================
@sum		// A = 4500
D = M		// D = RAM[4500] = vSum
@12		// A = 12
D = D + A	// D = vSum + 12
@j		// A = 3012
D = D - M	// D = (vSum + 12) - RAM[3012]

@q		// A = q
M = D		// RAM[3012] = (vSum + 12) - RAM[3012]


=============================================
4. arr[3] = -1
=============================================
@arr		// A = 20561
D = M		// D = RAM[20561]
@3		// A = 3
A = D + A	// A = RAM[20561]+3=arr[3]

M = -1		// RAM[loc arr[3]] = -1


=============================================
5. arr[j] = 0
=============================================
@j		// A = 3012
D = M		// D = RAM[3012] = vJ
@arr		// A = 20561
A = M + D	// A = RAM[20561] + vJ = vArr + vJ

M = 0		// RAM[vArr + vJ] = 0


=============================================
6. arr[j] = 17
=============================================
// calculate location of arr[j]
@arr		// A = 20561
D = M		// D = RAM[20561] = vArr, memory location of arr[0]
@j		// A = 3012
D = D + M	// D = vArr + RAM[3012] = vArr + vJ
@temp		// A = temp
M = D		// RAM[temp] = vArr + vJ; backup location

// load 17 into D
@17		// A = 17
D = A		// D = 17
@temp		// A = temp; restore array location
A = M		// RAM[temp] = vArr + vJ
M = D		// RAM[vArr + vJ] = 17; store D into array location


=============================================
7. i = 5
   i++
   i += 2
   i -= 3
=============================================
@5		// A = 5
D = A		// D = 5
@i		// A = i
M = D		// RAM[i] = 5

M = M + 1	// RAM[i] = RAM[i] + 1

@2		// A = 2
D = A		// D = 2
@i		// A = i
M = M + D	// RAM[i] = RAM[i] + 2

@3		// A = 3
D = A		// D = 3
@i		// A = i
M = M - D	// RAM[i] = RAM[i] - 3


=============================================
8. i = 5
   j = 10
   k = i - j
=============================================
// i = 5
@5		// A = 5
D = A 		// D = 5
@i		// A = i
M = D		// RAM[i] = 5

// j = 10
@10		// A = 10
D = A		// D = 10
@j		// A = j
M = D		// RAM[j] = 10

// i - j
@i		// A = i
D = M		// D = RAM[i]
@j		// A = j
D = D - M	// D = RAM[i] - RAM[j]

// k = i - j
@k		// A = k
M = D		// RAM[k] = RAM[i] - RAM[j]

