// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

// File name: RAM16K.hdl
// Programmer: King
// Date last modified: 17 February, 2019

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

// TODO: 
// Optimal: RAM4K(4)+DMux8Way+Mux4Way16

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Direct access logic
    // load at address to be set to given load, otherwise 0
    DMux8Way(in=load, sel=address[11..13], 
        a=load0, b=load1, c=load2, d=load3, e=load4, 
        f=load5, g=load6, h=load7);

    RAM4K(in=in, load=load0, address=address[0..11], out=r0);
    RAM4K(in=in, load=load1, address=address[0..11], out=r1);
    RAM4K(in=in, load=load2, address=address[0..11], out=r2);
    RAM4K(in=in, load=load3, address=address[0..11], out=r3);
    RAM4K(in=in, load=load4, address=address[0..11], out=r4);
    RAM4K(in=in, load=load5, address=address[0..11], out=r5);
    RAM4K(in=in, load=load6, address=address[0..11], out=r6);
    RAM4K(in=in, load=load7, address=address[0..11], out=r7);

    // out=register at given address
    Mux8Way16(a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, 
        sel=address[11..13], out=out);
}